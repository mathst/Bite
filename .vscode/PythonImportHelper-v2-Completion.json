[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "urls",
        "importPath": "mainApi",
        "description": "mainApi",
        "isExtraImport": true,
        "detail": "mainApi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "firebase_admin",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "firestore",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Certificate",
        "importPath": "firebase_admin.credentials",
        "description": "firebase_admin.credentials",
        "isExtraImport": true,
        "detail": "firebase_admin.credentials",
        "documentation": {}
    },
    {
        "label": "Certificate",
        "importPath": "firebase_admin.credentials",
        "description": "firebase_admin.credentials",
        "isExtraImport": true,
        "detail": "firebase_admin.credentials",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "cache_page",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "csrf_protect",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "google.auth",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.auth",
        "description": "google.auth",
        "detail": "google.auth",
        "documentation": {}
    },
    {
        "label": "id_token",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "google.auth.transport.requests",
        "description": "google.auth.transport.requests",
        "isExtraImport": true,
        "detail": "google.auth.transport.requests",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "api.api.asgi",
        "description": "api.api.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "api.api.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nsys.path.append(os.path.join(BASE_DIR, \"firebase\"))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ['DJANGO_SECRET_KEY']\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "SECRET_KEY = os.environ['DJANGO_SECRET_KEY']\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"django.contrib.sites\",",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"django.contrib.sites\",\n    'social_django',\n    \"allauth\",",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    # 'allauth.account.middleware.AuthenticationMiddleware',",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "ROOT_URLCONF = \"api.urls\"\n# TEMPLATE_PATH = os.path.join(BASE_DIR, 'templates')\n# TEMPLATE_DIRS = (\n#       TEMPLATE_PATH,\n#  )\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "WSGI_APPLICATION = \"api.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\nAUTHENTICATION_BACKENDS = [",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\nAUTHENTICATION_BACKENDS = [\n    'social_core.backends.open_id.OpenIdAuth',\n    'social_core.backends.google.GoogleOpenId',\n    'social_core.backends.google.GoogleOAuth2',",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'social_core.backends.open_id.OpenIdAuth',\n    'social_core.backends.google.GoogleOpenId',\n    'social_core.backends.google.GoogleOAuth2',\n    'social_core.backends.google.GoogleOAuth',\n    \"django.contrib.auth.backends.ModelBackend\",\n]\nSITE_ID = 1\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "SITE_ID = 1\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        # For each OAuth based provider, either add a ``SocialApp``\n        # (``socialaccount`` app) containing the required client\n        # credentials, or list them here:\n        \"APP\": {\n            \"client_id\": os.environ.get(\"GOOGLE_OAUTH2_CLIENT_ID\"),\n            \"secret\": os.environ.get(\"GOOGLE_OAUTH2_CLIENT_SECRET\"),\n            \"key\": \"\",",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_PROVIDERS",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "SOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        # For each OAuth based provider, either add a ``SocialApp``\n        # (``socialaccount`` app) containing the required client\n        # credentials, or list them here:\n        \"APP\": {\n            \"client_id\": os.environ.get(\"GOOGLE_OAUTH2_CLIENT_ID\"),\n            \"secret\": os.environ.get(\"GOOGLE_OAUTH2_CLIENT_SECRET\"),\n            \"key\": \"\",\n        },",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "LANGUAGE_CODE = \"pt-br\"\nAPPEND_SLASH = False\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = (os.path.join(BASE_DIR, \"static\"),)\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "APPEND_SLASH",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "APPEND_SLASH = False\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = (os.path.join(BASE_DIR, \"static\"),)\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n# Default primary key field type",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = (os.path.join(BASE_DIR, \"static\"),)\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = (os.path.join(BASE_DIR, \"static\"),)\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = (os.path.join(BASE_DIR, \"static\"),)\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n\"\"\"FIREBASE CREDENTIALS\"\"\"",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"\nSTATICFILES_DIRS = (os.path.join(BASE_DIR, \"static\"),)\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n\"\"\"FIREBASE CREDENTIALS\"\"\"\nFIREBASE_ACCOUNT_TYPE = os.environ.get(\"FIREBASE_ACCOUNT_TYPE\")\nFIREBASE_PROJECT_ID = os.environ.get(\"FIREBASE_PROJECT_ID\")\nFIREBASE_PRIVATE_KEY_ID = os.environ.get(\"FIREBASE_PRIVATE_KEY_ID\")",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "STATICFILES_DIRS = (os.path.join(BASE_DIR, \"static\"),)\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n\"\"\"FIREBASE CREDENTIALS\"\"\"\nFIREBASE_ACCOUNT_TYPE = os.environ.get(\"FIREBASE_ACCOUNT_TYPE\")\nFIREBASE_PROJECT_ID = os.environ.get(\"FIREBASE_PROJECT_ID\")\nFIREBASE_PRIVATE_KEY_ID = os.environ.get(\"FIREBASE_PRIVATE_KEY_ID\")\nFIREBASE_PRIVATE_KEY = os.environ.get(\"FIREBASE_PRIVATE_KEY\")",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n\"\"\"FIREBASE CREDENTIALS\"\"\"\nFIREBASE_ACCOUNT_TYPE = os.environ.get(\"FIREBASE_ACCOUNT_TYPE\")\nFIREBASE_PROJECT_ID = os.environ.get(\"FIREBASE_PROJECT_ID\")\nFIREBASE_PRIVATE_KEY_ID = os.environ.get(\"FIREBASE_PRIVATE_KEY_ID\")\nFIREBASE_PRIVATE_KEY = os.environ.get(\"FIREBASE_PRIVATE_KEY\")\nFIREBASE_CLIENT_EMAIL = os.environ.get(\"FIREBASE_CLIENT_EMAIL\")",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n\"\"\"FIREBASE CREDENTIALS\"\"\"\nFIREBASE_ACCOUNT_TYPE = os.environ.get(\"FIREBASE_ACCOUNT_TYPE\")\nFIREBASE_PROJECT_ID = os.environ.get(\"FIREBASE_PROJECT_ID\")\nFIREBASE_PRIVATE_KEY_ID = os.environ.get(\"FIREBASE_PRIVATE_KEY_ID\")\nFIREBASE_PRIVATE_KEY = os.environ.get(\"FIREBASE_PRIVATE_KEY\")\nFIREBASE_CLIENT_EMAIL = os.environ.get(\"FIREBASE_CLIENT_EMAIL\")\nFIREBASE_CLIENT_ID = os.environ.get(\"FIREBASE_CLIENT_ID\")\nFIREBASE_AUTH_URI = os.environ.get(\"FIREBASE_AUTH_URI\")\nFIREBASE_TOKEN_URI = os.environ.get(\"FIREBASE_TOKEN_URI\")",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "FIREBASE_ACCOUNT_TYPE",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "FIREBASE_ACCOUNT_TYPE = os.environ.get(\"FIREBASE_ACCOUNT_TYPE\")\nFIREBASE_PROJECT_ID = os.environ.get(\"FIREBASE_PROJECT_ID\")\nFIREBASE_PRIVATE_KEY_ID = os.environ.get(\"FIREBASE_PRIVATE_KEY_ID\")\nFIREBASE_PRIVATE_KEY = os.environ.get(\"FIREBASE_PRIVATE_KEY\")\nFIREBASE_CLIENT_EMAIL = os.environ.get(\"FIREBASE_CLIENT_EMAIL\")\nFIREBASE_CLIENT_ID = os.environ.get(\"FIREBASE_CLIENT_ID\")\nFIREBASE_AUTH_URI = os.environ.get(\"FIREBASE_AUTH_URI\")\nFIREBASE_TOKEN_URI = os.environ.get(\"FIREBASE_TOKEN_URI\")\nFIREBASE_AUTH_PROVIDER_X509_CERT_URL = os.environ.get(\n    \"FIREBASE_AUTH_PROVIDER_X509_CERT_URL\"",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "FIREBASE_PROJECT_ID",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "FIREBASE_PROJECT_ID = os.environ.get(\"FIREBASE_PROJECT_ID\")\nFIREBASE_PRIVATE_KEY_ID = os.environ.get(\"FIREBASE_PRIVATE_KEY_ID\")\nFIREBASE_PRIVATE_KEY = os.environ.get(\"FIREBASE_PRIVATE_KEY\")\nFIREBASE_CLIENT_EMAIL = os.environ.get(\"FIREBASE_CLIENT_EMAIL\")\nFIREBASE_CLIENT_ID = os.environ.get(\"FIREBASE_CLIENT_ID\")\nFIREBASE_AUTH_URI = os.environ.get(\"FIREBASE_AUTH_URI\")\nFIREBASE_TOKEN_URI = os.environ.get(\"FIREBASE_TOKEN_URI\")\nFIREBASE_AUTH_PROVIDER_X509_CERT_URL = os.environ.get(\n    \"FIREBASE_AUTH_PROVIDER_X509_CERT_URL\"\n)",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "FIREBASE_PRIVATE_KEY_ID",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "FIREBASE_PRIVATE_KEY_ID = os.environ.get(\"FIREBASE_PRIVATE_KEY_ID\")\nFIREBASE_PRIVATE_KEY = os.environ.get(\"FIREBASE_PRIVATE_KEY\")\nFIREBASE_CLIENT_EMAIL = os.environ.get(\"FIREBASE_CLIENT_EMAIL\")\nFIREBASE_CLIENT_ID = os.environ.get(\"FIREBASE_CLIENT_ID\")\nFIREBASE_AUTH_URI = os.environ.get(\"FIREBASE_AUTH_URI\")\nFIREBASE_TOKEN_URI = os.environ.get(\"FIREBASE_TOKEN_URI\")\nFIREBASE_AUTH_PROVIDER_X509_CERT_URL = os.environ.get(\n    \"FIREBASE_AUTH_PROVIDER_X509_CERT_URL\"\n)\nFIREBASE_CLIENT_X509_CERT_URL = os.environ.get(\"FIREBASE_CLIENT_X509_CERT_URL\")",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "FIREBASE_PRIVATE_KEY",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "FIREBASE_PRIVATE_KEY = os.environ.get(\"FIREBASE_PRIVATE_KEY\")\nFIREBASE_CLIENT_EMAIL = os.environ.get(\"FIREBASE_CLIENT_EMAIL\")\nFIREBASE_CLIENT_ID = os.environ.get(\"FIREBASE_CLIENT_ID\")\nFIREBASE_AUTH_URI = os.environ.get(\"FIREBASE_AUTH_URI\")\nFIREBASE_TOKEN_URI = os.environ.get(\"FIREBASE_TOKEN_URI\")\nFIREBASE_AUTH_PROVIDER_X509_CERT_URL = os.environ.get(\n    \"FIREBASE_AUTH_PROVIDER_X509_CERT_URL\"\n)\nFIREBASE_CLIENT_X509_CERT_URL = os.environ.get(\"FIREBASE_CLIENT_X509_CERT_URL\")\nGOOGLE_API_KEY = os.environ.get(\"GOOGLE_API_KEY\")",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "FIREBASE_CLIENT_EMAIL",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "FIREBASE_CLIENT_EMAIL = os.environ.get(\"FIREBASE_CLIENT_EMAIL\")\nFIREBASE_CLIENT_ID = os.environ.get(\"FIREBASE_CLIENT_ID\")\nFIREBASE_AUTH_URI = os.environ.get(\"FIREBASE_AUTH_URI\")\nFIREBASE_TOKEN_URI = os.environ.get(\"FIREBASE_TOKEN_URI\")\nFIREBASE_AUTH_PROVIDER_X509_CERT_URL = os.environ.get(\n    \"FIREBASE_AUTH_PROVIDER_X509_CERT_URL\"\n)\nFIREBASE_CLIENT_X509_CERT_URL = os.environ.get(\"FIREBASE_CLIENT_X509_CERT_URL\")\nGOOGLE_API_KEY = os.environ.get(\"GOOGLE_API_KEY\")\nGOOGLE_OAUTH2_CLIENT_ID = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_ID\")",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "FIREBASE_CLIENT_ID",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "FIREBASE_CLIENT_ID = os.environ.get(\"FIREBASE_CLIENT_ID\")\nFIREBASE_AUTH_URI = os.environ.get(\"FIREBASE_AUTH_URI\")\nFIREBASE_TOKEN_URI = os.environ.get(\"FIREBASE_TOKEN_URI\")\nFIREBASE_AUTH_PROVIDER_X509_CERT_URL = os.environ.get(\n    \"FIREBASE_AUTH_PROVIDER_X509_CERT_URL\"\n)\nFIREBASE_CLIENT_X509_CERT_URL = os.environ.get(\"FIREBASE_CLIENT_X509_CERT_URL\")\nGOOGLE_API_KEY = os.environ.get(\"GOOGLE_API_KEY\")\nGOOGLE_OAUTH2_CLIENT_ID = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_ID\")\nGOOGLE_OAUTH2_CLIENT_SECRET = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_SECRET\")",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "FIREBASE_AUTH_URI",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "FIREBASE_AUTH_URI = os.environ.get(\"FIREBASE_AUTH_URI\")\nFIREBASE_TOKEN_URI = os.environ.get(\"FIREBASE_TOKEN_URI\")\nFIREBASE_AUTH_PROVIDER_X509_CERT_URL = os.environ.get(\n    \"FIREBASE_AUTH_PROVIDER_X509_CERT_URL\"\n)\nFIREBASE_CLIENT_X509_CERT_URL = os.environ.get(\"FIREBASE_CLIENT_X509_CERT_URL\")\nGOOGLE_API_KEY = os.environ.get(\"GOOGLE_API_KEY\")\nGOOGLE_OAUTH2_CLIENT_ID = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_ID\")\nGOOGLE_OAUTH2_CLIENT_SECRET = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_SECRET\")\nGOOGLE_AUTH_REDIRECT_URI = \"http://localhost:8000/google-auth/\"",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "FIREBASE_TOKEN_URI",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "FIREBASE_TOKEN_URI = os.environ.get(\"FIREBASE_TOKEN_URI\")\nFIREBASE_AUTH_PROVIDER_X509_CERT_URL = os.environ.get(\n    \"FIREBASE_AUTH_PROVIDER_X509_CERT_URL\"\n)\nFIREBASE_CLIENT_X509_CERT_URL = os.environ.get(\"FIREBASE_CLIENT_X509_CERT_URL\")\nGOOGLE_API_KEY = os.environ.get(\"GOOGLE_API_KEY\")\nGOOGLE_OAUTH2_CLIENT_ID = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_ID\")\nGOOGLE_OAUTH2_CLIENT_SECRET = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_SECRET\")\nGOOGLE_AUTH_REDIRECT_URI = \"http://localhost:8000/google-auth/\"\n\"\"\"LOG\"\"\"",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "FIREBASE_AUTH_PROVIDER_X509_CERT_URL",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "FIREBASE_AUTH_PROVIDER_X509_CERT_URL = os.environ.get(\n    \"FIREBASE_AUTH_PROVIDER_X509_CERT_URL\"\n)\nFIREBASE_CLIENT_X509_CERT_URL = os.environ.get(\"FIREBASE_CLIENT_X509_CERT_URL\")\nGOOGLE_API_KEY = os.environ.get(\"GOOGLE_API_KEY\")\nGOOGLE_OAUTH2_CLIENT_ID = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_ID\")\nGOOGLE_OAUTH2_CLIENT_SECRET = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_SECRET\")\nGOOGLE_AUTH_REDIRECT_URI = \"http://localhost:8000/google-auth/\"\n\"\"\"LOG\"\"\"\n# LOGGING = {",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "FIREBASE_CLIENT_X509_CERT_URL",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "FIREBASE_CLIENT_X509_CERT_URL = os.environ.get(\"FIREBASE_CLIENT_X509_CERT_URL\")\nGOOGLE_API_KEY = os.environ.get(\"GOOGLE_API_KEY\")\nGOOGLE_OAUTH2_CLIENT_ID = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_ID\")\nGOOGLE_OAUTH2_CLIENT_SECRET = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_SECRET\")\nGOOGLE_AUTH_REDIRECT_URI = \"http://localhost:8000/google-auth/\"\n\"\"\"LOG\"\"\"\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': False,\n#     'handlers': {",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_API_KEY",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "GOOGLE_API_KEY = os.environ.get(\"GOOGLE_API_KEY\")\nGOOGLE_OAUTH2_CLIENT_ID = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_ID\")\nGOOGLE_OAUTH2_CLIENT_SECRET = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_SECRET\")\nGOOGLE_AUTH_REDIRECT_URI = \"http://localhost:8000/google-auth/\"\n\"\"\"LOG\"\"\"\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': False,\n#     'handlers': {\n#         'file': {",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_OAUTH2_CLIENT_ID",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "GOOGLE_OAUTH2_CLIENT_ID = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_ID\")\nGOOGLE_OAUTH2_CLIENT_SECRET = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_SECRET\")\nGOOGLE_AUTH_REDIRECT_URI = \"http://localhost:8000/google-auth/\"\n\"\"\"LOG\"\"\"\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': False,\n#     'handlers': {\n#         'file': {\n#             'level': 'DEBUG',",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_OAUTH2_CLIENT_SECRET",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "GOOGLE_OAUTH2_CLIENT_SECRET = os.environ.get(\"GOOGLE_OAUTH2_CLIENT_SECRET\")\nGOOGLE_AUTH_REDIRECT_URI = \"http://localhost:8000/google-auth/\"\n\"\"\"LOG\"\"\"\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': False,\n#     'handlers': {\n#         'file': {\n#             'level': 'DEBUG',\n#             'class': 'logging.handlers.RotatingFileHandler',",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_AUTH_REDIRECT_URI",
        "kind": 5,
        "importPath": "api.api.settings",
        "description": "api.api.settings",
        "peekOfCode": "GOOGLE_AUTH_REDIRECT_URI = \"http://localhost:8000/google-auth/\"\n\"\"\"LOG\"\"\"\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': False,\n#     'handlers': {\n#         'file': {\n#             'level': 'DEBUG',\n#             'class': 'logging.handlers.RotatingFileHandler',\n#             'filename': 'logs/debug.log',",
        "detail": "api.api.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api.api.urls",
        "description": "api.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(main_urls)),\n]",
        "detail": "api.api.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "api.api.wsgi",
        "description": "api.api.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "api.api.wsgi",
        "documentation": {}
    },
    {
        "label": "MainapiConfig",
        "kind": 6,
        "importPath": "api.mainApi.apps",
        "description": "api.mainApi.apps",
        "peekOfCode": "class MainapiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'mainApi'",
        "detail": "api.mainApi.apps",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "api.mainApi.forms",
        "description": "api.mainApi.forms",
        "peekOfCode": "class LoginForm(forms.Form):\n    email = forms.EmailField(\n        widget=forms.TextInput(attrs={\n            'class': 'input100',\n            'placeholder': 'Email',\n            'data-validate': 'Email é necessario: ex@abc.xyz'\n        })\n    )\n    password = forms.CharField(\n        widget=forms.PasswordInput(attrs={",
        "detail": "api.mainApi.forms",
        "documentation": {}
    },
    {
        "label": "CadastroClienteForm",
        "kind": 6,
        "importPath": "api.mainApi.forms",
        "description": "api.mainApi.forms",
        "peekOfCode": "class CadastroClienteForm(forms.Form):\n    nome = forms.CharField(\n        label='nome',\n        widget=forms.TextInput(attrs={\n            'class': 'input100',\n            'placeholder': 'Nome',\n            'data-validate': 'Nome é necessaria'\n        })\n    )\n    email = forms.EmailField(",
        "detail": "api.mainApi.forms",
        "documentation": {}
    },
    {
        "label": "TipoUsuario",
        "kind": 6,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "class TipoUsuario(Enum):\n    ADM = 'adm'\n    GER = 'gerente'\n    FUN = 'funcionario'\n    CLI= 'cliente'\n    def to_firestore_value(self):\n        return self.value\n# modelo de usuário\nclass Usuario(models.Model):\n    nome = models.CharField(max_length=100)",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "kind": 6,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "class Usuario(models.Model):\n    nome = models.CharField(max_length=100)\n    email = models.EmailField(unique=True)\n    telefone = models.CharField(max_length=20)\n    tipo = models.CharField(max_length=15, choices=[(tipo.name, tipo.value) for tipo in TipoUsuario])\n    uid = models.CharField(max_length=100, blank=True)\n    salt = models.CharField(max_length=100, blank=True)\n    hashed_password = models.CharField(max_length=100, blank=True)\n    class Meta:\n        verbose_name = 'Usuário'",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "EstadoPedido",
        "kind": 6,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "class EstadoPedido(Enum):\n    ESPERANDO = 'esperando'\n    PREPARANDO = 'preparando'\n    PRONTO = 'pronto'\nclass ItemPedido:\n    def __init__(self, nome: str, quantidade: int, valor_unitario: float, especificacoes: str = None): # type: ignore\n        self.nome = nome\n        self.quantidade = quantidade\n        self.valor_unitario = valor_unitario\n        self.especificacoes = especificacoes",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "ItemPedido",
        "kind": 6,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "class ItemPedido:\n    def __init__(self, nome: str, quantidade: int, valor_unitario: float, especificacoes: str = None): # type: ignore\n        self.nome = nome\n        self.quantidade = quantidade\n        self.valor_unitario = valor_unitario\n        self.especificacoes = especificacoes\n    @classmethod\n    def from_dict(cls, data):\n        return cls(\n            nome=data['nome'],",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "Pedido",
        "kind": 6,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "class Pedido:\n    def __init__(self, id_pedido, status, itens, valor_total):\n        self.id_pedido = id_pedido\n        self.status = status\n        self.itens = itens\n        self.valor_total = valor_total\n        self.data = datetime.datetime.now()\n    def to_dict(self):\n        return {\n            \"id_pedido\": self.id_pedido,",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "Carrinho",
        "kind": 6,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "class Carrinho:\n    def __init__(self, cliente_id):\n        self.cliente_id = cliente_id\n        self.valor_total = 0.0\n        self.itens = []\n    def adicionar_pedido(self, pedido):\n        for item_pedido in pedido.itens:\n            item_carrinho = next((item for item in self.itens if item['nome'] == item_pedido.nome), None)\n            if item_carrinho:\n                item_carrinho['quantidade'] += item_pedido.quantidade",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "FilaDePedidos",
        "kind": 6,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "class FilaDePedidos:\n    def __init__(self):\n        self.fila = []\n    def adicionar_pedido(self, pedido):\n        self.fila.append(pedido)\n        print(f\"Pedido adicionado à fila: {pedido}\")\n    def remover_pedido(self, pedido_id):\n        pedido_removido = None\n        for i, pedido in enumerate(self.fila):\n            if pedido.id_pedido == pedido_id:",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "class Item:\n    def __init__(self, nome, quantidade, valor_unitario, tipo, ingredientes=None):\n        self.nome = nome\n        self.quantidade = quantidade\n        self.valor_unitario = valor_unitario\n        self.tipo = tipo\n        self.ingredientes = ingredientes\n    def to_dict(self):\n        item_dict = {\n            \"nome\": self.nome,",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "Cardapio",
        "kind": 6,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "class Cardapio:\n    def __init__(self):\n        pass\n    def list_from_db(self):\n        # Retorna uma lista com todos os itens do cardápio presentes no banco de dados\n        cardapio = []\n        for item_doc in db.collection(\"itens\").stream():\n            item_dict = item_doc.to_dict()\n            if item_dict.get(\"itens_combo\"):\n                # Se o item for um combo, cria um objeto Combo ao invés de Item",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "Combo",
        "kind": 6,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "class Combo(Item):\n    def __init__(self, nome, valor_unitario, itens_combo):\n        super().__init__(nome, 1, valor_unitario, \"combo\", [])\n        self.itens_combo = itens_combo\n    def to_dict(self):\n        item_dict = super().to_dict()\n        item_dict[\"itens_combo\"] = self.itens_combo\n        return item_dict\n    def add_to_db(self):\n        db.collection(\"itens\").document(self.nome).set(self.to_dict())",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "Estoque",
        "kind": 6,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "class Estoque:\n    def __init__(self, id: str, data_ultima_reposicao: str, quantidade_ultima_reposicao: int, valor_ultima_reposicao: float, quantidade_total: int, id_item: str):\n        self.id = id\n        self.data_ultima_reposicao = data_ultima_reposicao\n        self.quantidade_ultima_reposicao = quantidade_ultima_reposicao\n        self.valor_ultima_reposicao = valor_ultima_reposicao\n        self.quantidade_total = quantidade_total\n        self.id_item = id_item\n        self.valor_unitario = valor_ultima_reposicao / quantidade_ultima_reposicao\n    def adicionar_reposicao(self, data_reposicao: str,data_retirada:str, quantidade_reposicao: int, valor_reposicao: float):",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "HistoricoPedido",
        "kind": 6,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "class HistoricoPedido:\n    def __init__(self, id: str, data_registro: str, valor_dia: float, valor_semana: float, valor_mes: float):\n        self.id = id\n        self.data_registro = data_registro\n        self.valor_dia = valor_dia\n        self.valor_semana = valor_semana\n        self.valor_mes = valor_mes\nclass Despesa:\n    def __init__(self, id: str, data_despesa: str, valor: float, descricao: str):\n        self.id = id",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "Despesa",
        "kind": 6,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "class Despesa:\n    def __init__(self, id: str, data_despesa: str, valor: float, descricao: str):\n        self.id = id\n        self.data_despesa = data_despesa\n        self.valor = valor\n        self.descricao = descricao",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "cred",
        "kind": 5,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "cred = Certificate(credentials)\nfirebase_admin.initialize_app(cred)\n# criação do objeto Firestore\ndb = firestore.client()\n# tipos de users\nclass TipoUsuario(Enum):\n    ADM = 'adm'\n    GER = 'gerente'\n    FUN = 'funcionario'\n    CLI= 'cliente'",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "api.mainApi.models",
        "description": "api.mainApi.models",
        "peekOfCode": "db = firestore.client()\n# tipos de users\nclass TipoUsuario(Enum):\n    ADM = 'adm'\n    GER = 'gerente'\n    FUN = 'funcionario'\n    CLI= 'cliente'\n    def to_firestore_value(self):\n        return self.value\n# modelo de usuário",
        "detail": "api.mainApi.models",
        "documentation": {}
    },
    {
        "label": "VeiculoSerializer",
        "kind": 6,
        "importPath": "api.mainApi.serializers",
        "description": "api.mainApi.serializers",
        "peekOfCode": "class VeiculoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Veiculo\n        fields = \"__all__\"",
        "detail": "api.mainApi.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api.mainApi.urls",
        "description": "api.mainApi.urls",
        "peekOfCode": "urlpatterns = [\n    path('comanda/', views.comanda, name='comanda'),\n    path('estoque/', views.estoque, name='estoque'),\n    path('financeiro/', views.finaceiro, name='financeiro'),\n    path('cardapio/', views.cardapio, name='cardapio'),\n    path('', views.login, name='login'),\n    path('cadastro/', views.cadastrar_usuario_cli, name='cadastrar_usuario_cli'),\n    path('login_google/', views.login_google, name='login_google'),\n    path('auth/', include('social_django.urls', namespace='social')),\n    path('reset/', views.reset,name='reset'),",
        "detail": "api.mainApi.urls",
        "documentation": {}
    },
    {
        "label": "cardapio",
        "kind": 2,
        "importPath": "api.mainApi.views",
        "description": "api.mainApi.views",
        "peekOfCode": "def cardapio(request):\n    # Lógica para listar produtos em estoque\n    return render(request, 'cardapio.html')\n# @login_required\ndef estoque(request):\n    # Lógica para listar produtos em estoque\n    return render(request, 'estoque.html')\n# @login_required\ndef pedidos(request):\n    return render(request, \"pedidos.html\")",
        "detail": "api.mainApi.views",
        "documentation": {}
    },
    {
        "label": "estoque",
        "kind": 2,
        "importPath": "api.mainApi.views",
        "description": "api.mainApi.views",
        "peekOfCode": "def estoque(request):\n    # Lógica para listar produtos em estoque\n    return render(request, 'estoque.html')\n# @login_required\ndef pedidos(request):\n    return render(request, \"pedidos.html\")\n# @login_required\ndef finaceiro(request):\n    return render(request, \"relFinaceiro.html\")\n# @login_required",
        "detail": "api.mainApi.views",
        "documentation": {}
    },
    {
        "label": "pedidos",
        "kind": 2,
        "importPath": "api.mainApi.views",
        "description": "api.mainApi.views",
        "peekOfCode": "def pedidos(request):\n    return render(request, \"pedidos.html\")\n# @login_required\ndef finaceiro(request):\n    return render(request, \"relFinaceiro.html\")\n# @login_required\ndef comanda(request):\n    return render(request, \"comanda.html\") \ndef index(request):\n    return render(request, \"index.html\") ",
        "detail": "api.mainApi.views",
        "documentation": {}
    },
    {
        "label": "finaceiro",
        "kind": 2,
        "importPath": "api.mainApi.views",
        "description": "api.mainApi.views",
        "peekOfCode": "def finaceiro(request):\n    return render(request, \"relFinaceiro.html\")\n# @login_required\ndef comanda(request):\n    return render(request, \"comanda.html\") \ndef index(request):\n    return render(request, \"index.html\") \n# Autentica o usuário usando o Google\n# def authenticate_with_google(request):\n#     id_token = request.POST.get('id_token')",
        "detail": "api.mainApi.views",
        "documentation": {}
    },
    {
        "label": "comanda",
        "kind": 2,
        "importPath": "api.mainApi.views",
        "description": "api.mainApi.views",
        "peekOfCode": "def comanda(request):\n    return render(request, \"comanda.html\") \ndef index(request):\n    return render(request, \"index.html\") \n# Autentica o usuário usando o Google\n# def authenticate_with_google(request):\n#     id_token = request.POST.get('id_token')\n#     decoded_token = firebase_auth.verify_id_token(id_token)\n#     if decoded_token is None:\n#         return JsonResponse({'error': 'Invalid ID token'}, status=400)",
        "detail": "api.mainApi.views",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "api.mainApi.views",
        "description": "api.mainApi.views",
        "peekOfCode": "def index(request):\n    return render(request, \"index.html\") \n# Autentica o usuário usando o Google\n# def authenticate_with_google(request):\n#     id_token = request.POST.get('id_token')\n#     decoded_token = firebase_auth.verify_id_token(id_token)\n#     if decoded_token is None:\n#         return JsonResponse({'error': 'Invalid ID token'}, status=400)\n#     email = decoded_token['email']\n#     firebase_user = firebase_auth.get_user_by_email(email)",
        "detail": "api.mainApi.views",
        "documentation": {}
    },
    {
        "label": "dashboard_admin",
        "kind": 2,
        "importPath": "api.mainApi.views",
        "description": "api.mainApi.views",
        "peekOfCode": "def dashboard_admin(request):\n    return render(request, 'dashboard_admin.html')\n@login_required\ndef dashboard_funcionario(request):\n    return render(request, 'dashboard_funcionario.html')\n@csrf_protect\ndef cadastrar_usuario_cli(request):\n    form = CadastroClienteForm()\n    if request.method == 'POST':\n        nome = request.POST['nome']",
        "detail": "api.mainApi.views",
        "documentation": {}
    },
    {
        "label": "dashboard_funcionario",
        "kind": 2,
        "importPath": "api.mainApi.views",
        "description": "api.mainApi.views",
        "peekOfCode": "def dashboard_funcionario(request):\n    return render(request, 'dashboard_funcionario.html')\n@csrf_protect\ndef cadastrar_usuario_cli(request):\n    form = CadastroClienteForm()\n    if request.method == 'POST':\n        nome = request.POST['nome']\n        email = request.POST['email']\n        telefone = request.POST['telefone']\n        tipo = TipoUsuario.CLI",
        "detail": "api.mainApi.views",
        "documentation": {}
    },
    {
        "label": "cadastrar_usuario_cli",
        "kind": 2,
        "importPath": "api.mainApi.views",
        "description": "api.mainApi.views",
        "peekOfCode": "def cadastrar_usuario_cli(request):\n    form = CadastroClienteForm()\n    if request.method == 'POST':\n        nome = request.POST['nome']\n        email = request.POST['email']\n        telefone = request.POST['telefone']\n        tipo = TipoUsuario.CLI\n        password = request.POST['password']\n        password1 = request.POST['password1']\n        # Verifica se as senhas são iguais",
        "detail": "api.mainApi.views",
        "documentation": {}
    },
    {
        "label": "cadastrar_usuario_func",
        "kind": 2,
        "importPath": "api.mainApi.views",
        "description": "api.mainApi.views",
        "peekOfCode": "def cadastrar_usuario_func(request):\n    form = CadastroClienteForm()\n    if request.method == 'POST':\n        nome = request.POST['nome']\n        email = request.POST['email']\n        telefone = request.POST['telefone']\n        tipo = TipoUsuario.FUN\n        password = request.POST['password']\n        password1 = request.POST['password1']\n        # Verifica se as senhas são iguais",
        "detail": "api.mainApi.views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "api.mainApi.views",
        "description": "api.mainApi.views",
        "peekOfCode": "def login(request):\n    form = LoginForm()\n    if request.method == 'POST':\n        email = request.POST.get('email')\n        password = request.POST.get('password')\n        api_key = os.environ.get('GOOGLE_API_KEY')# Coloque aqui sua chave de API do Firebase\n        # Criação do payload do body do request\n        payload = {\n            'email': email,\n            'password': password,",
        "detail": "api.mainApi.views",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 2,
        "importPath": "api.mainApi.views",
        "description": "api.mainApi.views",
        "peekOfCode": "def reset(request):\n    form = LoginForm()\n    if request.method == 'POST':\n        email = request.POST.get('email')\n        try:\n            auth.generate_password_reset_link(email)\n            print('Link de redefinição de senha enviado com sucesso')\n            messages.success(request, 'Um link de redefinição de senha foi enviado para o seu e-mail.')\n            return redirect('login')\n        except auth.InvalidArgumentError: # type: ignore",
        "detail": "api.mainApi.views",
        "documentation": {}
    },
    {
        "label": "login_google",
        "kind": 2,
        "importPath": "api.mainApi.views",
        "description": "api.mainApi.views",
        "peekOfCode": "def login_google(request):\n    if request.method == 'POST':\n        # Recupera o ID do token enviado pelo cliente\n        id_token = request.POST.get('idtoken')\n        try:\n            # Verifica se o token é válido\n            google_request = Request()\n            credentials, _ = google.auth.default(scopes=['openid', 'email', 'profile'])\n            id_info = id_token.verify_oauth2_token(id_token, google_request, credentials.client_id) # type: ignore\n            uid = id_info['sub']",
        "detail": "api.mainApi.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "api.manage",
        "description": "api.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'api.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "api.manage",
        "documentation": {}
    },
    {
        "label": "firestore_adminCallTransformer",
        "kind": 6,
        "importPath": "env.bin.fixup_firestore_admin_v1_keywords",
        "description": "env.bin.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "class firestore_adminCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'create_index': ('parent', 'index', ),\n        'delete_index': ('name', ),\n        'export_documents': ('name', 'collection_ids', 'output_uri_prefix', ),\n        'get_database': ('name', ),\n        'get_field': ('name', ),\n        'get_index': ('name', ),\n        'import_documents': ('name', 'collection_ids', 'input_uri_prefix', ),",
        "detail": "env.bin.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "env.bin.fixup_firestore_admin_v1_keywords",
        "description": "env.bin.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "env.bin.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "env.bin.fixup_firestore_admin_v1_keywords",
        "description": "env.bin.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestore_adminCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "env.bin.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "firestoreCallTransformer",
        "kind": 6,
        "importPath": "env.bin.fixup_firestore_v1_keywords",
        "description": "env.bin.fixup_firestore_v1_keywords",
        "peekOfCode": "class firestoreCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'batch_get_documents': ('database', 'documents', 'mask', 'transaction', 'new_transaction', 'read_time', ),\n        'batch_write': ('database', 'writes', 'labels', ),\n        'begin_transaction': ('database', 'options', ),\n        'commit': ('database', 'writes', 'transaction', ),\n        'create_document': ('parent', 'collection_id', 'document', 'document_id', 'mask', ),\n        'delete_document': ('name', 'current_document', ),\n        'get_document': ('name', 'mask', 'transaction', 'read_time', ),",
        "detail": "env.bin.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "env.bin.fixup_firestore_v1_keywords",
        "description": "env.bin.fixup_firestore_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "env.bin.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "env.bin.fixup_firestore_v1_keywords",
        "description": "env.bin.fixup_firestore_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestoreCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "env.bin.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "cred",
        "kind": 5,
        "importPath": "firebase.firebase_init",
        "description": "firebase.firebase_init",
        "peekOfCode": "cred = Certificate(credentials)\ndefault_app = firebase_admin.initialize_app(cred, {\n\t'databaseURL':credentials['databaseURL']\n\t})",
        "detail": "firebase.firebase_init",
        "documentation": {}
    },
    {
        "label": "default_app",
        "kind": 5,
        "importPath": "firebase.firebase_init",
        "description": "firebase.firebase_init",
        "peekOfCode": "default_app = firebase_admin.initialize_app(cred, {\n\t'databaseURL':credentials['databaseURL']\n\t})",
        "detail": "firebase.firebase_init",
        "documentation": {}
    }
]
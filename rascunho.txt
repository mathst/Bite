import firebase_admin
from firebase_admin import auth, credentials
from django.shortcuts import render, redirect
from django.contrib.auth.forms import AuthenticationForm, UserCreationForm
from django.contrib.auth import login, logout, authenticate

cred = credentials.Certificate("credentials.json")
firebase_admin.initialize_app(cred)

# def home(request):
#     login_form = AuthenticationForm()
#     return render(request, 'home.html', {'login_form': login_form})

# class SignupView(CreateView):
#     form_class = UserCreationForm
#     success_url = reverse_lazy('login')
#     template_name = 'signup.html'

# def login_view(request):
#     if request.method == 'POST':
#         form = AuthenticationForm(data=request.POST)
#         if form.is_valid():
#             user = form.get_user()
#             login(request, user)
#             return redirect('home')
#     else:
#         form = AuthenticationForm()
#     return render(request, 'login.html', {'form': form})

# def signup_view(request):
#     if request.method == 'POST':
#         form = UserCreationForm(request.POST)
#         if form.is_valid():
#             user = form.save()
#             login(request, user)
#             return redirect('home')
#     else:
#         form = UserCreationForm()
#     return render(request, 'signup.html', {'form': form})

# def logout_view(request):
#     logout(request)
#     return redirect('login')

# def reset_password(request):
#     if request.method == 'POST':
#         email = request.POST['email']
#         try:
#             auth.generate_password_reset_link(email)
#             message = 'Um link de redefinição de senha foi enviado para o seu email.'
#             return render(request, 'reset_password.html', {'message': message})
#         except:
#             error_message = 'Não foi possível enviar o link de redefinição de senha. Por favor, verifique seu email e tente novamente.'
#             return render(request, 'reset_password.html', {'error_message': error_message})
#     else:
#         return render(request, 'reset_password.html')


-----models-----

# from django.db import models
# from django.utils import timezone
# from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, AbstractUser
# from django.contrib.auth.models import BaseUserManager

# from firebase_admin import auth
# from firebase_admin import exceptions as firebase_exceptions

# class CustomUserManager(BaseUserManager):
#     def create_user(self, email, password=None, **extra_fields):
#         """
#         Cria e salva um usuário com o email e a senha fornecidos.
#         """
#         if not email:
#             raise ValueError('O email deve ser definido')
#         email = self.normalize_email(email)
#         user = self.model(email=email, **extra_fields)
#         user.set_password(password)
#         user.save()
#         return user

#     def create_superuser(self, email, password=None, **extra_fields):
#         """
#         Cria e salva um superusuário com o email e a senha fornecidos.
#         """
#         extra_fields.setdefault('is_staff', True)
#         extra_fields.setdefault('is_superuser', True)

#         if extra_fields.get('is_staff') is not True:
#             raise ValueError('Superuser deve ter is_staff=True.')
#         if extra_fields.get('is_superuser') is not True:
#             raise ValueError('Superuser deve ter is_superuser=True.')

#         return self.create_user(email, password, **extra_fields)

# class CustomUser(AbstractBaseUser, PermissionsMixin):
#     email = models.EmailField('e-mail', unique=True)
#     name = models.CharField('nome', max_length=100, blank=True)
#     age = models.IntegerField('idade', blank=True, null=True)
#     is_active = models.BooleanField('ativo', default=True)
#     is_staff = models.BooleanField('funcionário', default=False)
#     date_joined = models.DateTimeField('data de cadastro', default=timezone.now)

#     USERNAME_FIELD = 'email'
#     REQUIRED_FIELDS = []

#     objects = CustomUserManager()

#     def __str__(self):
#         return self.email

#     def get_full_name(self):
#         return self.name

#     def get_short_name(self):
#         return self.name

#     def generate_email_verification_link(self):
#         try:
#             link = auth.generate_email_verification_link(self.email)
#         except firebase_exceptions.FirebaseError as e:
#             raise ValueError(str(e))
#         return link

#     def generate_password_reset_link(self):
#         try:
#             link = auth.generate_password_reset_link(self.email)
#         except firebase_exceptions.FirebaseError as e:
#             raise ValueError(str(e))
#         return link

-------------------------view -------------------------
# import firebase_admin
# from firebase_admin import credentials, auth, initialize_app
# from firebase_admin import auth
# from google.oauth2 import id_token
# from google.auth.transport import requests
# from django.shortcuts import render, redirect
# from django.contrib.auth import authenticate, login, logout
# from django.contrib.auth.decorators import login_required
# from django.contrib.auth.forms import UserCreationForm, PasswordResetForm
# from django.views.generic import View, FormView, TemplateView
# from django.views.generic.edit import FormView
# from django.urls import reverse_lazy
# from .forms import CustomUserCreationForm
# from django.contrib import messages
# from firebase_admin import auth, exceptions as firebase_exceptions
# import json
# import os

# # Inicializando o SDK do Firebase usando credenciais do arquivo JSON
# with open('../credentials/credentials.json', 'r') as f:
#     credentials = json.load(f)
# cred = credentials.Certificate(credentials)
# firebase_admin.initialize_app(cred)

# class IndexView(View):
#     def get(self, request):
#         return render(request, 'index.html')

# class LoginView(View):
#     def get(self, request):
#         return render(request, 'login.html')

#     def post(self, request):
#         email = request.POST.get('email')
#         password = request.POST.get('password')
#         try:
#             user = auth.get_user_by_email(email)
#             if user is not None:
#                 # Verifica se a senha fornecida pelo usuário é válida
#                 user_token = auth.create_custom_token(user.uid)
#                 user_info = auth.verify_id_token(id_token, check_revoked=True)
#                 # Se a senha for válida, realiza o login
#                 user = authenticate(request, email=email, password=password)
#                 if user is not None:
#                     login(request, user)
#                     messages.success(request, 'You are now logged in.')
#                     return redirect('dashboard')
#             messages.error(request, 'Invalid email/password.')
#             return redirect('login')
#         except (auth.InvalidIdTokenError, auth.UserNotFoundError, auth.EmailNotFoundError) as e:
#             messages.error(request, 'Invalid email/password.')
#             return redirect('login')
#         except firebase_exceptions.FirebaseError as e:
#             messages.error(request, 'Something went wrong. Please try again later.')
#         return redirect('login')


# class GoogleLoginView(View):
#     def get(self, request):
#         return redirect(auth.generate_sign_in_with_email_link(request.build_absolute_uri(), auth.SignInWithEmailLinkRequest(email=request.user.email)))


# class RegisterView(View):
#     def get(self, request):
#         form = CustomUserCreationForm()
#         return render(request, 'register.html', {'form': form})

#     def post(self, request):
#         form = CustomUserCreationForm(request.POST)
#         if form.is_valid():
#             form.save()
#             email = form.cleaned_data.get('email')
#             raw_password = form.cleaned_data.get('password1')
#             try:
#                 # Cria um novo usuário no Firebase
#                 user = auth.create_user(email=email, password=raw_password)
#                 login(request, user)
#                 messages.success(request, 'Account created successfully.')
#                 return redirect('dashboard')
#             except firebase_exceptions.FirebaseError as e:
#                 messages.error(request, 'Something went wrong. Please try again later.')
#                 return redirect('register')
#         else:
#             for field in form:
#                 for error in field.errors:
#                     messages.error(request, f"{field.label}: {error}")
#         return render(request, 'register.html', {'form': form})


# class DashboardView(View):
#     def get(self, request):
#         return render(request, 'dashboard.html')


# class PasswordResetView(FormView):
#     form_class = PasswordResetForm
#     template_name = 'password_reset.html'
#     success_url = reverse_lazy('password_reset_done')

#     def get(self, request, *args, **kwargs):
#         if request.user.is_authenticated:
#             return redirect('home')
#         return super().get(request, *args, **kwargs)

#     def form_valid(self, form):
#         email = form.cleaned_data.get('email')
#         try:
#             # Send password reset email using Firebase Authentication API
#             auth.generate_password_reset_link(email)
#         except firebase_exceptions.FirebaseError as e:
#             messages.error(self.request, str(e))
#             return redirect('password_reset')
#         messages.success(self.request, 'Password reset email sent! Please check your inbox to reset your password.')
#         return super().form_valid(form)

# class PasswordResetDoneView(TemplateView):
#     template_name = 'password_reset_done.html'

# class PasswordResetConfirmView(FormView):
#     form_class = SetPasswordForm
#     template_name = 'password_reset_confirm.html'
#     success_url = reverse_lazy('password_reset_complete')

#     def get(self, request, *args, **kwargs):
#         if request.user.is_authenticated:
#             return redirect('home')
#         return super().get(request, *args, **kwargs)

#     def form_valid(self, form):
#         uidb64 = self.kwargs['uidb64']
#         token = self.kwargs['token']
#         try:
#             # Verify the password reset token using Firebase Authentication API
#             auth.verify_password_reset_link(token)
#         except firebase_exceptions.FirebaseError as e:
#             messages.error(self.request, str(e))
#             return redirect('password_reset_confirm', uidb64=uidb64, token=token)
#         return super().form_valid(form)

# class PasswordResetCompleteView(TemplateView):
#     template_name = 'password_reset_complete.html'

Estilização geral das páginas login

body {
  background: linear-gradient(to bottom, #FFFFFF, #C4C4C4); /* Fundo com degradê */
  font-family: Arial, sans-serif; /* Fonte */
}

.container {
  max-width: 800px; /* Largura máxima do conteúdo */
  margin: 0 auto; /* Centraliza o conteúdo na tela */
  padding: 20px; /* Espaçamento interno */
}

h1 {
  font-size: 36px; /* Tamanho da fonte */
  text-align: center; /* Centraliza o texto */
}

h2 {
  font-size: 24px; /* Tamanho da fonte */
}

p {
  font-size: 18px; /* Tamanho da fonte */
  line-height: 1.5; /* Espaçamento entre linhas */
}

/* Estilização específica para a página de Logout */

.logout {
  text-align: center; /* Centraliza o conteúdo */
}

.logout h1 {
  margin-bottom: 20px; /* Espaçamento inferior */
}

/* Estilização específica para a página de Signup */

.signup {
  text-align: center; /* Centraliza o conteúdo */
}

.signup h1 {
  margin-bottom: 20px; /* Espaçamento inferior */
}

/* Estilização específica para as páginas de Signup para Cliente, Funcionário e Administrador */

.signup-form {
  max-width: 500px; /* Largura máxima do formulário */
  margin: 0 auto; /* Centraliza o formulário */
  background: #FFFFFF; /* Fundo branco */
  border: 1px solid #CCCCCC; /* Borda cinza */
  border-radius: 10px; /* Cantos arredondados */
  padding: 20px; /* Espaçamento interno */
}

.signup-form h2 {
  margin-bottom: 20px; /* Espaçamento inferior */
  text-align: center; /* Centraliza o texto */
}

.signup-form label {
  display: block; /* Transforma o elemento em bloco */
  margin-bottom: 10px; /* Espaçamento inferior */
}

.signup-form input[type=text], 
.signup-form input[type=password], 
.signup-form select {
  display: block; /* Transforma o elemento em bloco */
  width: 100%; /* Largura total */
  padding: 10px; /* Espaçamento interno */
  margin-bottom: 20px; /* Espaçamento inferior */
  border-radius: 5px; /* Cantos arredondados */
  border: 1px solid #CCCCCC; /* Borda cinza */
}

.signup-form input[type=submit] {
  background: #006699; /* Fundo azul */
  color: #FFFFFF; /* Texto branco */
  border: none; /* Sem borda */
  padding: 10px 20px; /* Espaçamento interno */
  border-radius: 5px; /* Cantos arredondados */
  cursor: pointer; /* Cursor de mão ao passar o mouse */
  transition: background 0.3s ease-in-out; /* Transição suave */
}

.signup-form input[type=submit] {
  background-color: #4CAF50;
  border: none;
  color: #fff;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
  border-radius: 20px;
  transition: background-color 0.3s;
}

.signup-form input[type=submit]:hover {
  background-color: #3e8e41;
}
.signup-form {
  width: 90%;
  max-width: 500px;
  margin: 0 auto;
  text-align: center;
  background: linear-gradient(90deg, #e0e0e0, #fff);
  padding: 20px;
  border-radius: 20px;
  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.2);
}

.signup-form input[type=submit] {
  margin-top: 20px;
}

input[type=text],
input[type=email],
input[type=password] {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin-bottom: 20px;
  font-size: 16px;
}

button[type=submit] {
  background: #007bff; /* cor do botão */
  border: none;
  color: #fff;
  padding: 10px 20px;
  border-radius: 4px;
  font-size: 16px;
}

button[type=submit]:hover {
  background: #0069d9; /* cor de hover do botão */
  cursor: pointer;
}
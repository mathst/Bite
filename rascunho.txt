# Criar um novo carrinho para o cliente com ID 123
carrinho = Carrinho(123)

# Criar um novo pedido com dois itens
pedido = Pedido([
    ItemPedido('Camisa', 2, 29.99),
    ItemPedido('Calça', 1, 59.99)
])

# Adicionar o pedido ao carrinho
carrinho.adicionar_pedido(pedido)

# Mostrar o conteúdo atual do carrinho
carrinho.mostrar_carrinho()

# Remover o pedido do carrinho
carrinho.remover_pedido_carrinho(pedido)

# Mostrar o conteúdo atual do carrinho novamente
carrinho.mostrar_carrinho()

# Gerar um número de pedido único
pedido_id = carrinho.gerar_numero_pedido()

# Alterar o status do pedido para "pronto"
carrinho.alterar_status_pedido(pedido_id, EstadoPedido.PRONTO.value)


# Criar um objeto Cardapio
cardapio = Cardapio("id_cardapio", "Nome do Cardapio", "Descrição do Cardapio")

# Adicionar um item
item1 = ItemCardapio("id_item1", "Item 1", "Descrição do Item 1", 10.0)
cardapio.add_item(item1)

# Adicionar um combo
combo1 = ComboCardapio("id_combo1", "Combo 1", "Descrição do Combo 1", [item1])
cardapio.add_combo(combo1)

# Listar itens
itens = cardapio.list_items()
for item in itens:
    print(item.nome)

# Listar combos
combos = cardapio.list_combos()
for combo in combos:
    print(combo.nome)

# Editar um item
novo_item1 = ItemCardapio("id_item1", "Novo Item 1", "Nova descrição do Item 1", 15.0)
cardapio.edit_item("id_item1", novo_item1)

# Editar um combo
novo_combo1 = ComboCardapio("id_combo1", "Novo Combo 1", "Nova descrição do Combo 1", [novo_item1])
cardapio.edit_combo("id_combo1", novo_combo1)

# Excluir um item
cardapio.delete_item("id_item1")

# Excluir um combo
cardapio.delete_combo("id_combo1")

# Adicionar o cardápio ao banco de dados
cardapio.add_to_db()

# Atualizar o cardápio no banco de dados
cardapio.update_in_db()

# Excluir o cardápio do banco de dados
cardapio.delete_from_db()


from unittest import TestCase
from datetime import datetime
from firebase_admin import firestore
from models import Estoque, Item, Combo

class EstoqueTestCase(TestCase):
    def setUp(self):
        self.db = firestore.client()
        self.item_id = "item_teste"
        self.item_data = {
            "nome": "Item de Teste",
            "quantidade_total": 100,
            "valor_unitario": 10.0,
            "data_ultima_reposicao": "2023-01-01",
            "quantidade_ultima_reposicao": 50,
            "quantidade_ultima_retirada": 20
        }

    def tearDown(self):
        # Remove o item de teste do estoque
        self.db.collection("estoque").document(self.item_id).delete()

    def test_subtrair_item_do_estoque(self):
        estoque = Estoque()
        # Adiciona o item de teste ao estoque
        self.db.collection("estoque").document(self.item_id).set(self.item_data)

        # Realiza a subtração de 30 unidades do item de teste
        estoque.subtrair_item_do_estoque(self.item_id, 30)

        # Verifica se a quantidade total foi atualizada corretamente
        doc_ref = self.db.collection("estoque").document(self.item_id)
        doc = doc_ref.get().to_dict()
        self.assertEqual(doc["quantidade_total"], 70)

    def test_calcular_valor_total(self):
        estoque = Estoque()
        # Adiciona o item de teste ao estoque
        self.db.collection("estoque").document(self.item_id).set(self.item_data)

        # Calcula o valor total do item no estoque
        valor_total = estoque.calcular_valor_total(self.item_id)

        # Verifica se o valor total foi calculado corretamente
        self.assertEqual(valor_total, 1000.0)

    def test_calcular_valor_medio(self):
        estoque = Estoque()
        # Adiciona o item de teste ao estoque
        self.db.collection("estoque").document(self.item_id).set(self.item_data)

        # Calcula o valor médio do item no estoque
        valor_medio = estoque.calcular_valor_medio(self.item_id)

        # Verifica se o valor médio foi calculado corretamente
        self.assertEqual(valor_medio, 10.0)

    def test_atualizar_valor_unitario(self):
        estoque = Estoque()
        # Adiciona o item de teste ao estoque
        self.db.collection("estoque").document(self.item_id).set(self.item_data)

        # Atualiza o valor unitário do item
        novo_valor = 15.0
        estoque.atualizar_valor_unitario(self.item_id, novo_valor)

        # Verifica se o valor unitário foi atualizado corretamente
        doc_ref = self.db.collection("estoque").document(self.item_id)
        doc = doc_ref.get().to_dict()
        self.assertEqual(doc["valor_unitario"], novo_valor)
        self.assertEqual(estoque.valor_unitario, novo_valor)